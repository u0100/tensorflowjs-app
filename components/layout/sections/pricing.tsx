"use client";

import { useEffect, useState } from "react";
import * as tf from "@tensorflow/tfjs";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Check } from "lucide-react";
import Link from "next/link";

enum PopularPlan {
  NO = 0,
  YES = 1,
}

interface PlanProps {
  title: string;
  popular: PopularPlan;
  description: string;
  buttonText: string;
  benefitList: string[];
}

const plans: PlanProps[] = [
  {
    title: "ML-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è",
    popular: 0,
    description: "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.",
    buttonText: "–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å",
    benefitList: ["TensorFlow.js"],
  },
  {
    title: "Text",
    popular: 1,
    description: "Lorem ipsum dolor sit, amet ipsum consectetur adipisicing elit.",
    buttonText: "–ù–∞—á–∞—Ç—å",
    benefitList: ["Text"],
  },
  {
    title: "Text",
    popular: 0,
    description: "Lorem ipsum dolor sit, amet ipsum consectetur adipisicing elit.",
    buttonText: "–ù–∞—á–∞—Ç—å",
    benefitList: ["Text"],
  },
];

const words = {
  positive: [
    "—Å—á–∞—Å—Ç–ª–∏–≤—ã–π", "–ª—é–±–æ–≤—å", "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π", "–ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π", "—Ä–∞–¥–æ—Å—Ç–Ω—ã–π", "—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π", "–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π", "—Å–≤–µ—Ç–ª—ã–π",
    "–¥–æ–±—Ä—ã–π", "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π", "–∫—Ä–∞—Å–∏–≤—ã–π", "—Ç–µ–ø–ª—ã–π", "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π", "–≤–µ—Å–µ–ª—ã–π", "—á—É–¥–µ—Å–Ω—ã–π", "–≤–æ—Å—Ç–æ—Ä–∂–µ–Ω–Ω—ã–π", "—É—Å–ø–µ—à–Ω—ã–π",
    "–∫–ª–∞—Å—Å–Ω—ã–π", "–ª—é–±–µ–∑–Ω—ã–π", "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "–∑–¥–æ—Ä–æ–≤–æ", "—Å–≤–µ–∂–∏–π", "–∂–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω—ã–π", "–∞–∫—Ç–∏–≤–Ω—ã–π", "—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π", "—Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π",
    "–≥–µ—Ä–æ–π", "–¥–æ—Å—Ç–æ–π–Ω—ã–π", "–≤–µ–ª–∏–∫–æ–¥—É—à–Ω—ã–π", "—Å–∏–ª—å–Ω—ã–π", "—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π", "—É–º–Ω—ã–π", "—Å—á–∞—Å—Ç—å–µ", "–ª—é–±—è—â–∏–π", "–¥–æ–≤–µ—Ä—á–∏–≤—ã–π", "—É–≤–∞–∂–∞–µ–º—ã–π",
    "–≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º–Ω—ã–π", "–≤–µ—Ä–Ω—ã–π", "—Å–º–µ—à–Ω–æ–π", "–æ–±–æ–∂–∞–µ–º—ã–π", "—Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π", "–æ—Ç–ª–∏—á–Ω—ã–π", "–≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω—ã–π", "–º—É–¥—Ä—ã–π", "–≤—ã–¥–∞—é—â–∏–π—Å—è",
    "—Å–≤–µ—Ç–ª—ã–π", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π", "–ª—é–±–æ–ø—ã—Ç–Ω—ã–π", "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π", "–∑–∞–±–æ—Ç–ª–∏–≤—ã–π", "—Å—á–∞—Å—Ç–ª–∏–≤–æ", "–ø–æ–∑–∏—Ç–∏–≤", "–≤–µ–ª–∏–∫–æ–ª–µ–ø–∏–µ", "–≥–µ—Ä–æ–∏—á–µ—Å–∫–∏–π",
    "—É–¥–∞—á–Ω—ã–π", "–¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π", "—á–∏—Å—Ç–æ—Å–µ—Ä–¥–µ—á–Ω—ã–π", "—Å—á–∞—Å—Ç–ª–∏–≤", "–∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π", "–º—É–¥—Ä—ã–π", "–Ω–µ–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π", "—Ä–∞–¥–æ—Å—Ç—å", "–¥–æ–±—Ä–æ—Ç–∞",
    "–æ—Å–≤–µ–∂–∞—é—â–∏–π", "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π", "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "—Å–≤–æ–±–æ–¥–Ω—ã–π", "–æ—Ç–∫—Ä—ã—Ç—ã–π", "–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π", "—É—Å–ø–µ—Ö", "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ã–π",
    "–∏—Å–∫—É—Å–Ω—ã–π", "–æ–±–Ω–∞–¥–µ–∂–∏–≤–∞—é—â–∏–π", "–ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π", "–¥–æ—Å—Ç–æ–π–Ω—ã–π", "—Å—á–∞—Å—Ç—å–µ", "—â–µ–¥—Ä—ã–π", "–æ—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π", "—Å–≤–µ–∂–µ—Å—Ç—å", "–ª—É—á—à–∞—è",
    "–Ω–∞–¥–µ–∂–Ω—ã–π", "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω", "–≤–æ—Å—Ç–æ—Ä–≥", "—Å–∏–º–ø–∞—Ç–∏—á–Ω—ã–π", "—á–∏—Å—Ç–æ—Å–µ—Ä–¥–µ—á–Ω—ã–π", "–∫–ª–∞—Å—Å–Ω–æ", "–ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π", "–±–ª–µ—Å—Ç—è—â–∏–π", "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
    "–ø–æ–º–æ–≥–∞—é—â–∏–π", "–æ–±–æ–∂–∞–µ–º—ã–π", "—É—Å–ø–µ—à–Ω–æ—Å—Ç—å", "—Ç—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π", "—Å–≤–µ—Ç–ª—ã–π", "–ø–æ–∑–∏—Ç–∏–≤–Ω–æ", "—Å–∏–ª—å–Ω—ã–π", "—è—Ä–∫–∏–π"
  ],
  negative: [
    "–≥—Ä—É—Å—Ç–Ω—ã–π", "–Ω–µ–Ω–∞–≤–∏—Å—Ç—å", "—É–∂–∞—Å–Ω—ã–π", "—Å—Ç—Ä–∞—à–Ω—ã–π", "—Ç—Ä–µ–≤–æ–∂–Ω—ã–π", "–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω—ã–π", "–º–µ—Ä–∑–∫–∏–π", "–ø–ª–æ—Ö–æ–π", "–Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–π", "—Å—Ç—Ä–∞—à–Ω–æ",
    "–ø–µ—á–∞–ª—å–Ω—ã–π", "–æ—Ç—á–∞—è–Ω–Ω—ã–π", "–Ω–µ—É–¥–∞—á–Ω—ã–π", "–æ—Ç–∫–∞–∑", "–º—É—á–∏—Ç–µ–ª—å–Ω—ã–π", "–±–µ–∑–Ω–∞–¥–µ–∂–Ω—ã–π", "–±–µ–¥–Ω—ã–π", "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–Ω—ã–π", "—Ç–µ—Ä–ø–µ—Ç—å", "–Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ã–π",
    "—Ö—É–¥—à–∏–π", "–∑–ª–æ–π", "—Å—Ç—Ä–∞—à–Ω–æ", "—Å–∫—É—á–Ω—ã–π", "–ø–æ–∑–æ—Ä", "–æ–±–∏–¥–Ω—ã–π", "–Ω–µ–Ω–∞–≤–∏–∂—É", "–∂—É—Ç–∫–∏–π", "–≤—Ä–µ–¥–Ω—ã–π", "—É–∂–∞—Å", "–Ω–µ—É–¥–∞—á–∞", "—É–∂–∞—Å–Ω–æ", "–≥–Ω–µ–≤–Ω—ã–π",
    "—É—Å—Ç–∞–ª—ã–π", "–ø–ª–æ—Ö–æ", "–¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω—ã–π", "–Ω–µ–ø—Ä–∏—è—Ç–Ω–æ", "–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π", "–ø–æ–¥–ª—ã–π", "—Ö–∞–º—Å–∫–∏–π", "—Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–π", "–≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π", "–±–æ–ª–µ–∑–Ω–µ–Ω–Ω—ã–π",
    "–Ω–µ–≤–µ–∑—É—á–∏–π", "–Ω–µ–∏—Å–∫—Ä–µ–Ω–Ω–∏–π", "–Ω–µ–ø–æ–∫–æ—Ä–Ω—ã–π", "–±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–π", "–æ–¥–∏–Ω–æ–∫–∏–π", "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ", "—Ç—Ä—É–¥–Ω—ã–π", "–∑–ª–æ–±–Ω—ã–π", "—Å–ª–∞–±—ã–π", "–¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π",
    "–Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–π", "–Ω–µ–≤—ã–Ω–æ—Å–∏–º—ã–π", "—Ç—è–∂–µ–ª—ã–π", "–±–æ–ª–µ–∑–Ω–µ–Ω–Ω–æ", "—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ", "–≥—Ä—É—Å—Ç–Ω–æ", "—Å—Ç—Ä–∞—à–Ω–æ", "–Ω–µ—É–¥–∞—á–Ω—ã–π", "–≤–∏–Ω–æ–≤–Ω—ã–π", "—É–≥—Ä–æ–∑–∞", "–Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å",
    "–Ω–µ–º–æ—â–Ω—ã–π", "—Å–ª–æ–∂–Ω—ã–π", "–æ–ø–∞—Å–Ω—ã–π", "–Ω–µ–ø–æ–ø—É–ª—è—Ä–Ω—ã–π", "–ø–æ—Ç–µ—Ä—è", "–≥–Ω–µ–≤", "–ø—Å–∏—Ö–æ–∑", "–∂–∞–ª–∫–∏–π", "–º—Ä–∞—á–Ω—ã–π", "–Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏", "–Ω–µ–ø—Ä–∏—è–∑–Ω—å",
    "–ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π", "–Ω–µ–≤–µ—Ä–Ω—ã–π", "–Ω–µ—Å—á–∞—Å—Ç—å–µ", "–æ–±–º–∞–Ω", "–ø–æ–∫–æ—Ä–Ω–æ—Å—Ç—å", "—Å–ª–æ–∂–Ω–æ—Å—Ç—å", "–∫—Ä—É—à–µ–Ω–∏–µ", "–≥–Ω–µ–≤", "–≥—Ä—É—Å—Ç–Ω–æ", "—Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ", "–Ω–µ—É–¥–∞—á–∞",
    "—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π", "–ø–æ–∑–æ—Ä", "–ø–µ—Å—Å–∏–º–∏–∑–º", "–Ω–µ–≤—ã–Ω–æ—Å–∏–º–æ", "–Ω–µ–Ω–∞–≤–∏–¥–µ—Ç—å", "—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ", "—Ç–æ—Å–∫–∞", "–∂–∞–ª–æ–±–∞", "–Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π", "–Ω–µ—É–¥–∞—á–Ω—ã–π",
    "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π", "–±–æ–ª–µ–∑–Ω—å", "–ø–æ–∑–æ—Ä", "–∏–∑–æ–ª—è—Ü–∏—è", "–Ω–µ—Å–ø–æ–∫–æ–π–Ω—ã–π", "–∫—Ä–∏–∫", "–æ–±–∏–¥–Ω—ã–π", "–∫—Ä–∞—Ö", "—Å—Ç—Ä–∞—à–Ω—ã–π", "—É–Ω—ã–ª—ã–π"
  ]
};

export const PricingSection = () => {
  const [model, setModel] = useState<tf.Sequential | null>(null);
  const [word, setWord] = useState("");
  const [prediction, setPrediction] = useState<string | null>(null);

  useEffect(() => {
    const newModel = tf.sequential();
    newModel.add(tf.layers.dense({ units: 1, inputShape: [1], activation: "sigmoid" }));
    newModel.compile({ optimizer: "sgd", loss: "binaryCrossentropy" });

    const xs = tf.tensor2d([
      ...words.positive.map((_, i) => [i + 1]),
      ...words.negative.map((_, i) => [i + 1 + words.positive.length]),
    ]);
    const ys = tf.tensor2d([
      ...words.positive.map(() => [1]),
      ...words.negative.map(() => [0]),
    ]);

    newModel.fit(xs, ys, { epochs: 200 }).then(() => setModel(newModel));
  }, []);

  const handlePredict = () => {
    if (model) {
      const index = 
      words.positive.includes(word.toLowerCase()) 
    ? words.positive.indexOf(word.toLowerCase()) + 1
    : words.negative.includes(word.toLowerCase()) 
    ? words.negative.indexOf(word.toLowerCase()) + 1 + words.positive.length
    : -1; // –ï—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ


      const inputTensor = tf.tensor2d([[index]]);
      const output = model.predict(inputTensor) as tf.Tensor;
      const probability = output.dataSync()[0];

      setPrediction(probability > 0.5 ? "–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å–ª–æ–≤–æ! üòä" : "–ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ —Å–ª–æ–≤–æ... üò¢");
    }
  };

  return (
    <section className="container py-24 sm:py-32">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-lg text-primary tracking-wider">ML TensorFlow.js project</h2>
        <Button asChild variant="secondary" className="w-5/6 md:w-1/4 font-bold">
          <Link href="https://github.com/u0100/tensorflowjs-app" target="_blank">
            Github –ø—Ä–æ–µ–∫—Ç–∞
          </Link>
        </Button>
      </div>

      <div className="flex flex-col gap-8">
        {plans.map(({ title, popular, description, buttonText, benefitList }, index) => (
          <Card key={title}>
            <CardHeader>
              <CardTitle className="pb-2 text-2xl">{title}</CardTitle>
              <CardDescription className="pb-4 text-lg">{description}</CardDescription>
            </CardHeader>
            <CardContent className="flex flex-col gap-4">
              {index === 0 ? (
                <>
                  <Input
                    type="text"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ"
                    value={word}
                    onChange={(e) => setWord(e.target.value)}
                  />
                  <Button onClick={handlePredict} disabled={!model}>
                    {buttonText}
                  </Button>
                  {prediction !== null && <p className="text-lg font-semibold">–†–µ–∑—É–ª—å—Ç–∞—Ç: {prediction}</p>}
                </>
              ) : (
                <div className="space-y-4">
                  {benefitList.map((benefit) => (
                    <span key={benefit} className="flex items-center">
                      <Check className="text-primary mr-2" />
                      <h3 className="text-lg">{benefit}</h3>
                    </span>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        ))}
      </div>
    </section>
  );
};
